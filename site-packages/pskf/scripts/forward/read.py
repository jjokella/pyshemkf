# Read routine for forward arrays
from pskf.tools.plot import specs as sc

from pskf.tools.plot import plotfunctions as pf
from pskf.tools.run import runmodule as rm
from pskf.tools.run import pythonmodule as pm
from pskf.scripts.forward import arrays as fa


def read(
        model_name,
        dat,
        let,
        fdir=None,
        fname=None,
        varname='uindex',
        nt=0,
):
    """
    Reading variable array from SHEMAT-Suite vtk-file.

    Parameters
    ----------
    model_name : string
        String of model name.

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    varname : string
        Variable name for array to be read.
        Possibilities: 'uindex' 'head','temp','kz', 'v'

    nt : string
        Number of time step output.

    Returns
    -------
    numpy_array : array
        Array containing the variable array

    numpy_array_name : string
        Containing proposed saving location for Array.
    """

    # Dirs
    if fdir is None:
        # samples_output_dir
        fdir = rm.make_output_dirs(model_name, dat, let)[1]
    if fname is None:
        # time_out_file
        fname = rm.make_file_dir_names(model_name, nt)[17]

    # Get filetype ############################################################
    if fname[-3:] == 'vtk':
        ftype = 'vtk'
    elif fname[-2:] == 'h5' or fname[-3:] == 'hdf':
        ftype = 'hdf'
    else:
        print(fname)
        raise RuntimeError('Wrong filetype.')

    # Get reader ##############################################################
    if ftype == 'vtk':
        reader = pf.my_vtk(fdir, fname, varname)
    elif ftype == 'hdf':
        reader = pf.my_hdf(fdir+'/'+fname, varname)

    # Numpy Array  ############################################################
    if ftype == 'vtk':
        numpy_array = pf.my_vtk_to_numpy(reader)
    elif ftype == 'hdf':
        numpy_array = reader

    # Numpy Array Name ########################################################
    numpy_array_name = pm.py_output_filename(
        fa.tag,
        varname,
        sc.specl(model_name, dat, let)+'_'+str(nt),
        "npy",
    )

    return numpy_array, numpy_array_name
