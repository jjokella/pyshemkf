# Plot routine for forward pics

import matplotlib as mpl
from matplotlib import cm            # Colormap commands (cm.get_cmap())
from matplotlib import colors
import numpy as np

from pskf.tools.run import pythonmodule as pm
from pskf.tools.plot import plotfunctions as pf
from pskf.tools.plot import specs as sc

from pskf.scripts.forward import arrays as fa


###############################################################################
#               Plot Nonuniform Image of Variable array                       #
###############################################################################
def plot(
        ax,
        model_name,
        dat,
        let,
        nt=0,
        is_grid=True,
        is_mask=False,
        is_labels=True,
        is_ownticks=False,
        is_ownticklabels=False,
        axistitle='',
        varname='uindex',     # 'head','v','temp','kz', 'uindex'
        v_component=1,        # 0,1,2
        is_position=True,
        position=[0.1, 0.1, 0.6, 0.8],
        is_ownlims=False,
        xlims=[0.0, 0.8032],
        ylims=[0.0, 0.8032],
        zlims=[0.0, 0.8032],
        alpha=1.0,
        maskvalue=7,
        xlabelfontsize=40,
        ylabelfontsize=40,
        xownticks=[0.1+i*0.1 for i in range(9)],
        yownticks=[0.1+i*0.1 for i in range(9)],
        xticklabels=[0.1+i*0.1 for i in range(9)],
        yticklabels=[0.1+i*0.1 for i in range(9)],
        xticklabelfontsize=20,
        yticklabelfontsize=20,
        num_cbar=7,
        low_cbar=10.0285,
        high_cbar=10.0304,
        auto_cbar=True,
        pic_format='pdf',                        # 'png','eps','pdf'
        is_xz=False,
):
    """
    A plotting function for variable arrays in a NonUniformGrid.

    Parameters
    ----------
    ax : Axes
        The axes to draw to.

    model_name : string
        String of model name.
        'wavebc' - Model wavebc
        'wavereal' - Model wavereal
        'wavewell' - Model wavewell
        'wave' - Model wave

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    Returns
    -------
    ax : Axes
        Axes containing image of variable array.

    pic_name : string
        Containing proposed saving location for Figure.
    """
    # Read grid arrays from pskf/tools/plot/specs.py
    x = sc.x(model_name, dat, let)
    y = (sc.y(model_name, dat, let)
         if not is_xz else
         sc.z(model_name, dat, let))
    xticks = sc.xticks(model_name, dat, let)
    yticks = (sc.yticks(model_name, dat, let)
              if not is_xz else
              sc.zticks(model_name, dat, let))

    # Load variable array
    var = np.load(
        pm.py_output_filename(
            fa.tag,
            varname,
            sc.specl(model_name, dat, let)+'_'+str(nt),
            "npy",
        )
    )
    if is_xz:                   # Quick fix for x-z-arrays
        var = var.flatten().reshape(var.shape[::-1])

    if varname == 'v':
        var = var[:, :, v_component]
    if varname == 'head':
        var = var-10.0
    if varname == 'kz':
        var = np.log10(var)

    if auto_cbar:
        low_cbar = var.min()
        high_cbar = var.max()

    # # Possible Mask
    if is_mask:
        var = np.ma.array(var, mask=np.logical_or(var < maskvalue-0.5,
                                                  var > maskvalue+0.5))

    # Axis position
    if is_position:
        ax.set_position(position)

    # Create image
    im = mpl.image.NonUniformImage(
        ax,
        interpolation='nearest',
        cmap=pf.cmap_discretize(cm.viridis, num_cbar),
        norm=colors.Normalize(vmin=low_cbar,
                              vmax=high_cbar,
                              clip=False)
    )
    im.set_data(x, y, var)
    im.set_alpha(alpha)
    ax.images.append(im)

    # Ticks
    if is_ownticks:
        ax.xaxis.set_ticks(xownticks)
        ax.yaxis.set_ticks(yownticks)
    else:
        ax.xaxis.set_ticks(xticks[1::10])
        ax.yaxis.set_ticks(yticks[1::10])

    # Grid
    if is_grid:
        ax.grid()

    # Title
    ax.set_title(axistitle, fontsize=30)

    # Labels
    ax.set_xlabel(r'x [$\mathrm{m}$]', fontsize=xlabelfontsize, visible=is_labels)
    ax.set_ylabel(r'y [$\mathrm{m}$]', fontsize=ylabelfontsize, visible=is_labels)
    ax.tick_params(length=20 if is_labels else 0)
    if is_ownticklabels:
        ax.set_xticklabels(xticklabels, visible=is_labels,
                           fontsize=xticklabelfontsize)
        ax.set_yticklabels(yticklabels, visible=is_labels,
                           fontsize=yticklabelfontsize)
    ax.tick_params(axis="x", which="both", top=False, labeltop=False)
    ax.tick_params(axis="y", which="both", right=False, labelright=False)

    # Axis Limits
    if is_ownlims:
        ax.set_xlim(xlims[0], xlims[1])
        ax.set_ylim(ylims[0]
                    if not is_xz else
                    zlims[0],
                    ylims[1]
                    if not is_xz else
                    zlims[1])
    else:
        ax.set_xlim(sc.xlims(model_name, dat, let)[0],
                    sc.xlims(model_name, dat, let)[1])
        ax.set_ylim(sc.ylims(model_name, dat, let)[0]
                    if not is_xz else
                    sc.zlims(model_name, dat, let)[0],
                    sc.ylims(model_name, dat, let)[1]
                    if not is_xz else
                    sc.zlims(model_name, dat, let)[1])

    # Figure name
    if varname == 'v':
        varname = varname+'_'+str(v_component)
    if is_mask:
        varname = varname+'_'+str(maskvalue).zfill(2)

    pic_name = pm.py_output_filename(
        fa.tag,
        varname,
        sc.specl(model_name, dat, let)+'_'+str(nt),
        pic_format
    )

    return ax, pic_name
