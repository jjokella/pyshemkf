# Read routine for monitor arrays

import os
import numpy as np
from pskf.tools.plot import specs as sc

from pskf.tools.run import runmodule as rm
from pskf.tools.run import pythonmodule as pm
from pskf.scripts.monitor import arrays as ma

import exceptions


def read(
        model_name,
        dat,
        let,
        fdir=None,
        fname=None,
        varname='uindex',
        num_mon=1,
):
    """
    Reading monitor arrays from SHEMAT-Suite.

    Parameters
    ----------
    model_name : string
        String of model name.

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    varname : string
        Variable name for array to be read.
        Possibilities: 'uindex' 'head','temp','kz', 'v'

    num_mon : integer
        Number for monitoring point.
        IMPORTANT: num_mon = 0 corresponds to the first
        monitoring point in SHEMAT monitor file.
        General: num_mon = i corresponds to monitoring
        point i+1

    Returns
    -------
    numpy_array : array
        Array containing the monitor variable array

    numpy_array_name : string
        Containing proposed saving location for Array.
    """

    # Dirs
    if fdir is None:
        # samples_output_dir
        fdir = rm.make_output_dirs(model_name, dat, let)[1]
    if fname is None:
        # monitor_file
        fname = rm.make_file_dir_names(model_name)[16]

    # Read from monitor file ##################################################
    numpy_array = np.genfromtxt(fdir+'/'+fname,
                                dtype='f8',
                                comments='%',
                                usecols=(ma.varpos[varname]),
                                )
    # Reshape #################################################################
    num_mons = sc.num_mons(model_name, dat, let)
    if np.remainder(len(numpy_array), num_mons):
        raise exceptions.RuntimeError('Problem with num_mons')
    numpy_array = numpy_array.reshape(len(numpy_array)/num_mons, num_mons)
    numpy_array = numpy_array[:, num_mon]

    # Numpy Array Name ########################################################
    numpy_array_name = pm.py_output_filename(
        ma.tag,
        varname,
        sc.specl(model_name, dat, let)+'_'+str(num_mon),
        "npy"
    )

    return numpy_array, numpy_array_name


def read_all(
        fdir,
        fname,
        infdir,
        infname,
        varname='uindex',
        num_mon=1,
):
    """
    Reading general monitor files from SHEMAT-Suite.

    Parameters
    ----------

    fdir : string
        String of directory of monitor file

    fname : string
        String of name of monitor file

    infdir : string
        String of directory of SHEMAT-Suite input file

    infname : string
        String of name of SHEMAT-Suite input file

    varname : string
        Variable name for array to be read.
        Possibilities: 'uindex' 'head','temp','kz', 'v'

    num_mon : integer
        Number for monitoring point.
        IMPORTANT: num_mon = 0 corresponds to the first
        monitoring point in SHEMAT monitor file.
        General: num_mon = i corresponds to monitoring
        point i+1

    Returns
    -------
    numpy_array : array
        Array containing the monitor variable array
    """

    # Read from monitor file ##################################################
    numpy_array = np.genfromtxt(fdir+'/'+fname,
                                dtype='f8',
                                comments='%',
                                usecols=(ma.varpos[varname]),
                                )
    # Reshape #################################################################
    num_mons = sc.num_mons_all(infdir, infname)
    if np.remainder(len(numpy_array), num_mons):
        raise exceptions.RuntimeError('Problem with num_mons')
    numpy_array = numpy_array.reshape(len(numpy_array)/num_mons, num_mons)
    numpy_array = numpy_array[:, num_mon]

    return numpy_array


def mean(
        model_name,
        dat,
        let,
        varname='uindex',
        mons=[0, 1],
):
    """
    Computing mean monitor arrays from certain monitoring points.

    Parameters
    ----------
    model_name : string
        String of model name.

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    varname : string
        Variable name for array to be read.
        Possibilities: 'uindex' 'head','temp','kz', 'v'

    mons : array of integers
        Numbers for monitoring points for mean.
        IMPORTANT: num_mon = 0 corresponds to the first
        monitoring point in SHEMAT monitor file.
        General: num_mon = i corresponds to monitoring
        point i+1

    Returns
    -------
    mean_array : array
        Array containing the mean monitor variable array

    mean_array_name : string
        Containing proposed saving location for Array.
    """

    for imon, num_mon in enumerate(mons):

        # File name
        filename = pm.py_output_filename(
            ma.tag,
            varname,
            sc.specl(model_name, dat, let)+'_'+str(num_mon),
            "npy")

        # Check existence
        if not os.path.isfile(filename):
            raise exceptions.RuntimeError(
                'Monitoring numpy-file does not exist: '
                + filename)

        # Load filename
        if imon == 0:
            mean_array = np.load(filename)
        else:
            mean_array = mean_array + np.load(filename)
            if imon == len(mons)-1:
                mean_array = mean_array/np.float(len(mons))

    # Mean array name
    mean_array_name = pm.py_output_filename(
        ma.tag,
        varname,
        sc.specl(model_name, dat, let)+'_'
        + 'mean'+'_'
        + '_'.join([str(i) for i in mons]),
        "npy"
    )

    return mean_array, mean_array_name
