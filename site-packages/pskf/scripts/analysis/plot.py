# Plot routine for analysis pics

import matplotlib as mpl
from matplotlib import cm            # Colormap commands (cm.get_cmap())
from matplotlib import colors
import numpy as np

from pskf.tools.run import pythonmodule as pm
from pskf.tools.plot import plotfunctions as pf
from pskf.tools.plot import specs as sc

from pskf.scripts.analysis import arrays as aa


###############################################################################
#               Plot Nonuniform Image of Variable array                       #
###############################################################################
def plot(
        ax,
        model_name,
        dat,
        let,
        befaft='aft',
        nt=10,
        numpy_array_name=None,
        is_grid=True,
        is_mask=False,
        is_labels=True,
        is_ownticks=False,
        axistitle='',
        title_fontsize=30,
        varname='kz_mean',            # 'head','v','temp','kz', 'uindex'
        v_component=1,                # 0, 1, 2
        is_position=True,
        position=[0.1, 0.1, 0.6, 0.8],
        is_ownlims=False,
        xlims=[0.0, 620.0],
        ylims=[0.0, 620.0],
        alpha=1.0,
        maskvalue=7,
        xlabelfontsize=40,
        ylabelfontsize=40,
        xownticks=[0.1+i*0.1 for i in range(9)],
        yownticks=[0.1+i*0.1 for i in range(9)],
        diff_ticks=1,
        num_cbar=7,
        low_cbar=10.0285,
        high_cbar=10.0304,
        auto_cbar=True,
        pic_format='pdf',                        # 'png','eps','pdf'
):
    """
    A plotting function for variable arrays in a NonUniformGrid.

    Parameters
    ----------
    ax : Axes
        The axes to draw to.

    model_name : string
        String of model name.

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    nt : integer
        Number inside file name.

    numpy_array_name : string
        Full file name of numpy array including ending .npy

    Returns
    -------
    ax : Axes
        Axes containing image of variable array.

    pic_name : string
        Containing proposed saving location for Figure.
    """
    # Read grid arrays from pskf/tools/plot/specs.py
    x = sc.x(model_name, dat, let)
    y = sc.y(model_name, dat, let)
    xticks = sc.xticks(model_name, dat, let)[::diff_ticks]
    yticks = sc.yticks(model_name, dat, let)[::diff_ticks]

    # Load variable array
    if not numpy_array_name:
        var = np.load(pm.py_output_filename(
            aa.tag,
            varname+'_'+str(nt).zfill(4)+'_'+befaft,
            sc.specl(model_name, dat, let),
            "npy"
        ))
    else:
        var = np.load(numpy_array_name)

    if varname == 'v':
        var = var[:, :, v_component]

    if auto_cbar:
        low_cbar = var.min()
        high_cbar = var.max()

    # # Possible Mask
    if is_mask:
        var = np.ma.array(var, mask=np.logical_or(var < maskvalue-0.5,
                                                  var > maskvalue+0.5))

    # Axis position
    if is_position:
        ax.set_position(position)

    # Create image
    im = mpl.image.NonUniformImage(
        ax,
        interpolation='nearest',
        cmap=pf.cmap_discretize(cm.viridis, num_cbar),
        norm=colors.Normalize(vmin=low_cbar,
                              vmax=high_cbar,
                              clip=False)
    )
    im.set_data(x, y, var)
    im.set_alpha(alpha)
    ax.images.append(im)

    # Ticks
    if is_ownticks:
        ax.xaxis.set_ticks(xownticks)
        ax.yaxis.set_ticks(yownticks)
    else:
        ax.xaxis.set_ticks(xticks)
        ax.yaxis.set_ticks(yticks)

    # Grid
    if is_grid:
        ax.grid()

    # Title
    ax.set_title(axistitle, fontsize=title_fontsize)

    # Labels
    ax.set_xlabel('[m]', fontsize=xlabelfontsize,  visible=is_labels)
    ax.set_ylabel('[m]', fontsize=ylabelfontsize,  visible=is_labels)
    ax.tick_params(length=10 if is_labels else 0)
    ax.set_yticklabels(ax.get_yticks(), visible=is_labels)
    ax.set_xticklabels(ax.get_xticks(), visible=is_labels)

    # Axis Limits
    ax.set_xlim(xlims[0], xlims[1])
    ax.set_ylim(ylims[0], ylims[1])

    # Figure name
    if varname == 'v':
        varname = varname+'_'+str(v_component)
    if is_mask:
        varname = varname+'_'+str(maskvalue).zfill(2)

    pic_name = pm.py_output_filename(
        aa.tag,
        varname+'_'+str(nt).zfill(4),
        sc.specl(model_name, dat, let),
        pic_format
    )

    return ax, pic_name


def plot_all(
        ax,
        x,
        y,
        xticks,
        yticks,
        var,
        pic_name,
        numpy_array_name=None,
        is_grid=True,
        is_mask=False,
        is_labels=True,
        is_ownticks=False,
        axistitle='',
        title_fontsize=30,
        varname='kz_mean',            # 'head','v','temp','kz', 'uindex'
        v_component=1,                # 0, 1, 2
        is_position=True,
        position=[0.1, 0.1, 0.6, 0.8],
        is_ownlims=False,
        xlims=[0.0, 620.0],
        ylims=[0.0, 620.0],
        alpha=1.0,
        maskvalue=7,
        colormap=cm.viridis,
        xlabelfontsize=40,
        ylabelfontsize=40,
        xownticks=[0.1+i*0.1 for i in range(9)],
        yownticks=[0.1+i*0.1 for i in range(9)],
        diff_ticks=1,
        num_cbar=7,
        low_cbar=10.0285,
        high_cbar=10.0304,
        auto_cbar=True,
):
    """
    A plotting function for variable arrays in a NonUniformGrid.

    Parameters
    ----------
    ax : Axes
        The axes to draw to.

    model_name : string
        String of model name.

    dat : string
        String with date of model run.

    let : string
        String of letter of model run.

    nt : integer
        Number inside file name.

    numpy_array_name : string
        Full file name of numpy array including ending .npy

    Returns
    -------
    ax : Axes
        Axes containing image of variable array.

    pic_name : string
        Containing proposed saving location for Figure.
    """

    if auto_cbar:
        low_cbar = var.min()
        high_cbar = var.max()

    # # Possible Mask
    if is_mask:
        var = np.ma.array(var, mask=np.logical_or(var < maskvalue-0.5,
                                                  var > maskvalue+0.5))

    # Axis position
    if is_position:
        ax.set_position(position)

    # Create image
    im = mpl.image.NonUniformImage(
        ax,
        interpolation='nearest',
        cmap=pf.cmap_discretize(colormap, num_cbar),
        norm=colors.Normalize(vmin=low_cbar,
                              vmax=high_cbar,
                              clip=False)
    )
    im.set_data(x, y, var)
    im.set_alpha(alpha)
    ax.images.append(im)

    # Ticks
    if is_ownticks:
        ax.xaxis.set_ticks(xownticks)
        ax.yaxis.set_ticks(yownticks)
    else:
        ax.xaxis.set_ticks(xticks)
        ax.yaxis.set_ticks(yticks)

    # Grid
    if is_grid:
        ax.grid()

    # Title
    ax.set_title(axistitle, fontsize=title_fontsize)

    # Labels
    ax.set_xlabel('[m]', fontsize=xlabelfontsize,  visible=is_labels)
    ax.set_ylabel('[m]', fontsize=ylabelfontsize,  visible=is_labels)
    ax.tick_params(length=10 if is_labels else 0)
    ax.set_yticklabels(ax.get_yticks(), visible=is_labels)
    ax.set_xticklabels(ax.get_xticks(), visible=is_labels)

    # Axis Limits
    if is_ownlims:
        ax.set_xlim(xlims[0], xlims[1])
        ax.set_ylim(ylims[0], ylims[1])

    return ax, pic_name
