# Plot routine for gaussianity pics

from matplotlib import mlab

import numpy as np

from pskf.tools.run import pythonmodule as pm

from pskf.scripts.gaussianity import arrays as ga


def hist(
        ax,
        model_name='wavebc',
        which_method=0,
        ensemble_size=50,
        n_syn=10,
        n_comparisons=1000,
        which_res='endres',
        n_bins=100,
        # std_method='std',
        pic_format='pdf',
        # figpos=[0.15,0.3,0.8,0.6],               #xbeg, ybeg, xrange, yrange
        xlims=None,
        histlims=None,
        title=None,
        titley=1.05,
        is_plot=False,
        xlabel=None,
        ylabel=None,
        # ylims=[0.28,0.82],
        is_xticks=True,
        is_yticks=True,
        itickhide=10,
        # num_pack=4,                     # Number of methods in pack
        # formatsos=['o','v','s','p','o','v','s','p'],
        # coleros=[(0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0),(0.0,0.0,0.0),
        #                (1.0,1.0,1.0),(1.0,1.0,1.0),(1.0,1.0,1.0),(1.0,1.0,1.0)],
        # markersize=10,
        # markeredgesize=1.5,
        # fontleg=30,                              #18
        fonttit=30,
        fontaxl=30,
        fonttic=10,
):
    """
    A histogramming function for means of random subsets
    of given size.

    Parameters
    ----------
    ax : Axes
        The axes to draw to.

    model_name : string
        String of model name.
        'wavebc' - Model wavebc
        'wavereal' - Model wavereal
        'wavewell' - Model wavewell
        'wave' - Model wave

    which_method : int
        Integer containing the method specifier
        from module plotarrays.

    ensemble_size : integer
        Ensemble size of the job. Possibilities: 50,
        70, 100, 250, 500, 1000, 2000

    n_syn : integer
        Number of synthetic studies in subset for mean calculation.

    n_comparisons : integer
        Number of means calculated.

    which_res : string
        'endres' - use residuals after EnKF run
        'begres' - use residuals before EnKF run

    n_bins : integer
        Number of bins of histogram

    pic_format : string
        Format of the picture
        'pdf' - pdf-format
        'eps' - eps-format
        'png' - png-format
        'jpg' - jpg-format
        'svg' - svg-format

    Returns
    -------
    ax : Axes
        Axes containing histogram.

    pic_name : string
        Containing proposed saving location for Figure.
    """

    # Load means
    arr = np.load(pm.py_output_filename(
        ga.tag,
        'meanarray_'+which_res,
        model_name+'_'+str(ensemble_size)+'_'+str(n_syn)
        + '_'+str(n_comparisons)+'_'+str(which_method),
        'npy'))

    # Histogram
    n, bins, patches = ax.hist(
        arr,
        n_bins,
        color='grey',
        range=histlims,
        density=True,
        stacked=True
    )

    ax.tick_params(labelsize=fonttic)

    if xlims:
        ax.set_xlim(xlims)

    if title:
        ax.set_title(title, size=fonttit, y=titley)

    if not is_xticks:
        ax.set_xticklabels([])
    else:
        for label in ax.xaxis.get_ticklabels()[::itickhide]:
            label.set_visible(False)

    if not is_yticks:
        ax.set_yticklabels([])
    else:
        for label in ax.yaxis.get_ticklabels()[::itickhide]:
            label.set_visible(False)

    if xlabel:
        ax.set_xlabel(xlabel, size=fontaxl)

    if ylabel:
        ax.set_ylabel(ylabel, size=fontaxl)

    if is_plot:
        # add a 'best fit' line
        y = mlab.normpdf(bins, np.mean(arr), np.std(arr))
        ax.plot(bins, y, '--', lw=1, color="k")

    # Saving location
    pic_name = pm.py_output_filename(
        ga.tag,
        'meanarray_'+which_res,
        model_name+'_'+str(ensemble_size)+'_'+str(n_syn)
        + '_'+str(n_comparisons)+'_'+str(which_method),
        pic_format
    )

    return ax, pic_name
