# Read routine for gaussianity arrays

import numpy as np

from pskf.tools.plot import plotarrays as pa
from pskf.tools.run import pythonmodule as pm
from pskf.scripts.gaussianity import arrays as ga


def read(
        model_name='wavebc',
        which_method=0,
        ensemble_size=50,
        n_syn=10,
        n_comparisons=1000,
        which_res='endres',
):
    """
    Reads residual arrays at beginning (begres) or
    end (endres) of the EnKF run and calculates
    an array of means from random subsets of given
    size.

    Parameters
    ----------
    model_name : string
        String of model name.
        'wavebc' - Model wavebc
        'wavereal' - Model wavereal
        'wavewell' - Model wavewell
        'wave' - Model wave

    which_method : int
        Integer containing the method specifier
        from module plotarrays.

    ensemble_size : integer
        Ensemble size of the job. Possibilities: 50,
        70, 100, 250, 500, 1000, 2000

    n_syn : integer
        Number of synthetic studies in subset for mean
        calculation.

    n_comparisons : integer
        Number of means calculated.

    which_res : string
        'endres' - use residuals after EnKF run
        'begres' - use residuals before EnKF run

    Returns
    -------
    gauss_array : array
        Array containing the means.

    gauss_array_name : string
        Containing proposed saving location for array.
    """

    # Checks
    if ensemble_size in [50, 70, 100, 250]:
        if n_syn > 1000:
            raise exceptions.RuntimeError('n_syn wrong')
    elif ensemble_size in [500, 1000, 2000]:
        if n_syn > 100:
            raise exceptions.RuntimeError('n_syn wrong')
    else:
        raise exceptions.RuntimeError('ensemble size wrong')

    # Load final residuals for all methods and the ensemblesize
    dats = pa.dats[model_name]
    lets = pa.lets[model_name]
    nums = pa.nums[model_name]

    res = np.load(pm.py_output_filename(
        'dists',
        which_res,
        model_name+'_'+dats[which_method][ensemble_size]
        + '_'+lets[which_method][ensemble_size],
        'npy'
    ))

    # Calculate mean array
    gauss_array = [
        np.mean(
            res[
                np.random.permutation(
                    np.arange(
                        nums[which_method][ensemble_size]
                    )
                )[0:n_syn]
            ]
        )
        for i in range(n_comparisons)
    ]

    gauss_array_name = pm.py_output_filename(
        ga.tag,
        'meanarray_'+which_res,
        model_name+'_'+str(ensemble_size)+'_'+str(n_syn)+'_'
        + str(n_comparisons)+'_'+str(which_method),
        'npy')

    return gauss_array, gauss_array_name
